#!@PYTHON_EXECUTABLE@

import subprocess
import os
import sys
import datetime
import argparse
import metadata
import json
from collections import defaultdict

from multiprocessing import Pool


def read_json_lines(path):
    lines = []
    with open(path) as f:
        for line in f:
            lines.append(json.loads(line))
    return lines


class Record():
    def __init__(self, args):
        self.args = args
        self.gdb_args = ["cgdb", "--args"] if args.debug else []

    def run(self, idx):
        exe, *argv = TEST_APPS[idx]
        proc = os.path.join("coreutils-6.10-llvm-prefix", "bin", exe + ".bc")
        directory = f"{exe}-{idx}"
        log_path = os.path.join(self.args.log_dir, directory)
        klee_args = (self.gdb_args +
                     ["@KLEE_BINARY@"] +
                     DEFAULT_ARGS +
                     ["--output-dir=%s" % log_path, proc] + argv)
        print("$ %s" % " ".join(klee_args))
        subprocess.call(klee_args)
        app_data = dict(directory=directory, executable=proc)
        return app_data


def record(args):
    r = Record(args)
    data = dict(applications=[],
                measurement_name=args.measurement_name,
                created_at=args.created_at)
    p = Pool(args.concurrency)
    data["applications"] = p.map(r.run, range(0, len(TEST_APPS)))

    metadata.save(args.log_dir, data)


def replay_test_case(args, app, test_case, stats):
    if not test_case["is_error_case"]:
        return
    basename = test_case["testcase"][:-6]
    path = basename + ".path"
    replay_path = os.path.join(args.previous_measurement_path, app["directory"], path)
    output_dir = os.path.join(args.log_dir, "%s-%s" % (app["directory"], basename))
    executable = os.path.join(app["executable"])

    klee_args = (["@KLEE_BINARY@"] +
                 DEFAULT_ARGS +
                 ["--replay-path=%s" % replay_path,
                  "--output-dir=%s" % output_dir,
                  executable] +
                 SYM_ARGS)
    print("$ %s" % " ".join(klee_args))
    subprocess.call(klee_args)
    replay_path_stats = os.path.join(output_dir, "stats.jsonl")
    replay_test_cases = read_json_lines(replay_path_stats)
    if len(replay_test_cases) != 1:
        return
    replay_test_case = replay_test_cases[0]

    length = subprocess.check_output(["wc", "-l", replay_path]).decode("utf-8").split()[0]

    stats["application"].append(app["directory"])
    stats["replay_path_length"].append(length)
    for field in test_case.keys():
        stats["original_" + field].append(test_case[field])

    for field in replay_test_case.keys():
        stats["replay_" + field].append(replay_test_case[field])


def replay(args):
    import pandas as pd
    data = metadata.load(args.previous_measurement_path)
    stats = defaultdict(list)
    for app in data["applications"]:
        stat_path = os.path.join(args.previous_measurement_path,
                                 app["directory"],
                                 "stats.jsonl")
        test_cases = read_json_lines(stat_path)
        for test_case in test_cases:
            replay_test_case(args, app, test_case, stats)
    stats_path = os.path.join(args.log_dir, "resource_stats.tsv")
    pd.DataFrame(stats).to_csv(stats_path, sep="\t")


def parse_args():
    parser = argparse.ArgumentParser(usage='%(prog)s [options]')
    parser.add_argument("--debug", action="store_true")
    parser.add_argument("--concurrency", type=int)
    parser.add_argument("--log-path",
                        help="base directory where logs will be stored",
                        default="logs")
    subparsers = parser.add_subparsers(dest="action")
    record = subparsers.add_parser("record")
    record.add_argument("measurement_name")
    replay = subparsers.add_parser("replay")
    replay.add_argument("previous_measurement_path")
    return parser.parse_args()


def main():
    args = parse_args()
    os.chdir(os.path.dirname(sys.argv[0]))
    now = datetime.datetime.utcnow()
    now = now.replace(microsecond=0).strftime("%Y-%m-%dT%H-%M-%S")

    if args.action == "replay":
        previous = args.previous_measurement_path
        args.measurement_name = os.path.basename(previous) + ".replay"
        args.log_dir = os.path.join(os.path.dirname(previous), args.measurement_name)
    else:
        dirname = "%s-%s" % (now, args.measurement_name)
        args.log_dir = os.path.join(args.log_path, dirname)

    args.created_at = now
    print("write logs to '%s'" % args.log_dir)
    os.makedirs(args.log_dir)
    cmd = ["env", "-i", "bash", "-c", "(source testing-env.sh; env >test.env)"]
    subprocess.call(cmd)
    if args.action == "record":
        record(args)
    else:
        replay(args)

#TEST_APPS = ["md5sum", "mknod", "mkfifo", "mkdir", "paste", "ptx", "seq", "pr"]
#TEST_APPS = ["tac"]


def jasper_args(input_fmt, output_fmt):
    return [
        "jasper",
        "--sym-files", "2", "600",
        "--input-format", input_fmt,
        "--output-format", output_fmt,
        "--input", "A",
        "--output", "B",
    ]

TEST_APPS = [
    jasper_args("jp2", "bmp"),
    jasper_args("bmp", "jp2"),
    jasper_args("mif", "jp2"),
    jasper_args("jp2", "mif"),
    jasper_args("jpc", "jp2"),
    jasper_args("jpc", "pgx"),
    jasper_args("jp2", "jpc"),
    jasper_args("pgx", "jpc"),
]

DEFAULT_ARGS = [
    "--simplify-sym-indices",
    "--write-cvcs",
    "--write-cov",
    "--output-module",
    "--disable-inlining",
    "--optimize",
    "--use-forked-solver",
    "--use-cex-cache",
    "--libc=uclibc",
    "--posix-runtime",
    "--allow-external-sym-calls",
    "--only-output-states-covering-new",
    "--environ=test.env",
    "--run-in=sandbox",
    "--max-sym-array-size=4096",
    "--max-instruction-time=120.",
    "--max-memory=120000",
    "--max-time=7200.",
    #"--debug-print-instructions=all:file",
    #"--debug-print-instructions=src:file",
    #"--debug-print-instructions=all:file",
    #"--debug-print-instructions=compact:file",
    "--watchdog",
    "--max-memory-inhibit=false",
    "--max-static-fork-pct=1",
    "--max-static-solve-pct=1",
    "--max-static-cpfork-pct=1",
    "--switch-type=internal",
    "--search=random-path",
    "--use-batching-search",
    "--batch-instructions=10000",
    "--check-overshift",
    "--check-div-zero",
    "--emit-all-errors",
    "--write-paths",
]

# --input lena_gray.bmp --output lena_gray.jp2
SYM_ARGS = [
    "--sym-files", "2", "1250",
    "--output-format", "jp2",
    "--input-format", "bmp",
    "--input", "A",
    "--output", "B",
    #"--sym-files", "2", "200",
    #"--sym-args", "0", "1", "10",
    #"--sym-args", "0", "1", "10",
    #"--sym-args", "0", "2", "2",
    #"--sym-stdout",
]

#SYM_ARGS = [
#    "--sym-args", "0", "1", "10",
#    "--sym-args", "0", "2", "2",
#    "--sym-files", "1", "8",
#    "--sym-stdin", "8",
#    "--sym-stdout",
#]

if __name__ == "__main__":
    main()
